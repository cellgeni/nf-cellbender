//This fixes nf-core launch error: project <project-name> is currently stickied on revision: main 
manifest.defaultBranch = "main"


// Global default params, used in configs
params {
  // Process-specific parameters
  output_dir              = "cellbender-results"
  publish_mode            = 'copy'

  // Required parameters
  sample_table            = null
  mapper                  = null
  solo_quant              = ""

  // Optional parameters
  help                    = false
  version                 = "0.3"
  on_irods                = false
  qc_mode                 = 3
  exclude_features        = ""
  cells                   = ""
  droplets                = ""
  epochs                  = ""
  fpr                     = ""
  lr                      = ""
  min_umi                 = ""
}

// Singularity environment parameters
singularity {
  enabled     = true
  autoMounts  = true
  cacheDir    = '/nfs/cellgeni/singularity/images/'
  runOptions  = '-B /lustre,/nfs'
  pullTimeout = '100m'
}

// Configuring LSF job submission parameters for each process
executor {
  name           = 'lsf'
  perJobMemLimit = true
}

process {

  errorStrategy = 'retry'
  maxRetries    = 5

  withName: LoadFromIrods {
    cpus     = { 1 * task.attempt }
    memory   = { 2.GB * task.attempt }
    array    = 100
    queue    = 'transfer'
    maxForks = 5
  }
  withName: RemoveBackground {
      // Set the container options
    container        = "docker://quay.io/cellgeni/cellbender:${params.version}"
    clusterOptions   = ' -gpu "mode=shared:j_exclusive=no:gmem=6000:num=1"'
    containerOptions = '--nv'

      // Set the resources for the process
    cpus       = { 2 * task.attempt }
    memory     = { 30.GB * task.attempt }
    queue      = 'gpu-normal'
    array      = 5
    maxForks   = 5
    publishDir = [
      path: "${params.output_dir}",
      mode: "${params.publish_mode}",
    ]
  }
  withName: QualityControl {
    container  = "docker://quay.io/cellgeni/cellbender:${params.version}"
    cpus       = { 2 * task.attempt }
    memory     = { 8.GB * task.attempt }
    queue      = 'normal'
    publishDir = [
      path: "${params.output_dir}",
      mode: "${params.publish_mode}",
    ]
  }
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Capturing Nextflow log files into a reports directory
timeline {
  enabled   = true
  file      = "execution-reports/timeline.html"
  overwrite = true
}

report {
  enabled   = true
  file      = "execution-reports/report.html"
  overwrite = true
}

trace {
  enabled   = true
  file      = "execution-reports/trace.txt"
  overwrite = true
}

// Unscoped options
cleanup = true
workDir = "nf-work"
