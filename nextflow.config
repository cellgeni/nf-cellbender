//This fixes nf-core launch error: project <project-name> is currently stickied on revision: main 
manifest.defaultBranch = "main"


// Global default params, used in configs
params {
  // process-specific parameters
  output_dir   = "cellbender-results"
  publish_mode = 'copy'

  // required parameters
  sample_table = null
  mapper       = null
  solo_quant   = null

  // optional parameters
  help         = false
  version      = "0.3"
  on_irods     = false
  qc_mode      = 3
  cells        = ""
  droplets     = ""
  epochs       = ""
  fpr          = ""
  lr           = ""
}

// Singularity environment parameters
singularity {
  enabled    = true
  autoMounts = true
  cacheDir   = '/nfs/cellgeni/singularity/images/'
  runOptions = '-B /lustre,/nfs --nv'
}

// Configuring LSF job submission parameters for each process
executor {
  name           = 'lsf'
  perJobMemLimit = true
}

process {

  errorStrategy = 'retry'
  maxRetries    = 5

  withName: LoadFromIrods {
    cpus     = { 1 * task.attempt }
    memory   = { 2.GB * task.attempt }
    queue    = 'transfer'
    maxForks = 5
  }
  withName: RemoveBackground {
    container      = '/nfs/cellgeni/singularity/images/cellbender0.3.0-pytorch2.3.1-cuda12.1.1-ubuntu22.04.sif'
    cpus           = { 2 * task.attempt }
    memory         = { 30.GB * task.attempt }
    queue          = 'gpu-normal'
    clusterOptions = { ' -gpu "mode=shared:j_exclusive=no:gmem=6000:num=1"' }
    maxForks       = 5
    publishDir     = [
      path: "${params.output_dir}",
      mode: "${params.publish_mode}",
    ]
  }
  withName: QualityControl {
    container  = '/nfs/cellgeni/singularity/images/cellbender0.2.2-pytorch1.11-cuda11.3.1-R4.1.3.sif'
    cpus       = { 1 * task.attempt }
    memory     = { 2.GB * task.attempt }
    queue      = 'normal'
    publishDir = [
      path: "${params.output_dir}",
      mode: "${params.publish_mode}",
    ]
  }
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Capturing Nextflow log files into a reports directory
timeline {
  enabled   = true
  file      = "cellbender-reports/timeline.html"
  overwrite = true
}

report {
  enabled   = true
  file      = "cellbender-reports/report.html"
  overwrite = true
}

trace {
  enabled   = true
  file      = "cellbender-reports/trace.txt"
  overwrite = true
}

// Unscoped options
cleanup = true
workDir = "nf-work"
